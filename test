#!/bin/bash

# definitions/functions {{{
function div() {
  printf "${_S}= ${_Y}AGS${_S} ($1)${_N}\n"
}
function plain_div() {
  printf "${_S}========================================${_S}\n"
}
function title() {
  printf "${_S}= ${_Y}$1${_S}${_N}\n"
}
function check_output() {
  # compile expect to compare with output
  expect=()
  while IFS= read -r line; do expect+=("$line")
  done < <(for i in "${get_expect[@]}"; do printf "$i\n"; done)

  # actually check output
  [[ "$output_only" == true ]] && return
  local all_ok=true
  for i in "${!output[@]}"; do
    a="${output[i]}"
    b="${expect[i]}"
    [[ $b == "skip_check" ]] && continue
    # char by char diffing
    if [[ "$a" != "$b" ]]; then
      printf "$a\n$b\n"
      diff <(printf "$a") <(printf "$b") | colordiff
      printf "${_G}CHAR BY CHAR TIME${_N}\n"
      for (( j=0; j<20; j++ )); do echo "${a:$j:1} ... ${b:$j:1}"; done
      all_ok=false
      break
    # else
    #   printf "${_G}passed line:${_N} $b\n"
    #
    fi
  done
  if [[ $all_ok == true ]]; then
    printf "${_G}passed:${_C} $1\n\n${_N}"; return 0
  else
    printf "${_R}failed:${_C} $1\n\n${_N}"; exit 1
  fi
}
_N='\033[0m'    # Normal
_R='\033[0;31m' # Red
_G='\033[0;32m' # Green
_Y='\033[0;33m' # Yellow
_B='\033[0;34m' # Blue
_P='\033[0;35m' # Purple
_C='\033[0;36m' # Cyan
_S='\033[1;37m' # Gray (Soft)
# }}}
CWD="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
TESTDIR=$CWD/test_root
ags=$CWD/ags
tree=false
# execute this when script stops suddenly
trap "rm -rf $TESTDIR" EXIT

# handle arguments
#  -s for short
#  -o for output only
short=false
output_only=false
while [[ $# -gt 0 ]]; do
  case $1 in
    -s) short=true; shift;;
    -o) output_only=true; shift;;
    *|-*|--*) echo "Unknown option $1"; exit 1;;
  esac
done

function create_scanlist() {
touch $TESTDIR/scanlist
cat <<EOF > $TESTDIR/scanlist
$TESTDIR/alpha/one
$TESTDIR/alpha/two
$TESTDIR/alpha/three
$TESTDIR/alpha/four
$TESTDIR/alpha/five
EOF
}
function test_prep() { # {{{
  # create test git repositories
  mkdir -p $TESTDIR/alpha/bravo/charlie/delta/echo/foxtrot
  create_scanlist

  # /alpha/one

  mkdir $TESTDIR/alpha/one
  cd $TESTDIR/alpha/one && git init >/dev/null

  touch untracked_file

  touch untracked_deletion
  git add untracked_deletion
  git commit -m "added file: untracked_deletion" >/dev/null
  rm untracked_deletion

  echo "staged_deletion" >staged_deletion
  git add staged_deletion
  git commit -m "added file: staged_deletion" >/dev/null
  rm staged_deletion
  git add staged_deletion

  touch staged_file
  git add staged_file

  echo $PWD && git status -s

  # /alpha/two

  mkdir $TESTDIR/alpha/two
  cd $TESTDIR/alpha/two && git init >/dev/null

  touch modified_file_modified
  echo "modified_file_deleted">modified_file_deleted
  git add modified_file_deleted
  git add modified_file_modified
  git commit -m "added file: modified_file_modified" >/dev/null
  echo "I love pizza">>modified_file_modified
  git add modified_file_modified
  echo "I love bubble tea">>modified_file_modified

  echo "hello world">new_file_modified
  git add new_file_modified
  echo "what's up">>new_file_modified

  echo "new_file_deleted">new_file_deleted
  git add new_file_deleted
  rm new_file_deleted

  echo "modified_file_deleted" >>modified_file_deleted
  git add modified_file_deleted
  rm modified_file_deleted

  echo $PWD && git status -s

  # /alpha/three

  mkdir $TESTDIR/alpha/three.git
  cd $TESTDIR/alpha/three.git && git init --bare >/dev/null

  mkdir $TESTDIR/alpha/three
  cd $TESTDIR/alpha/three && git init >/dev/null

  git remote add origin ../three.git
  touch gold
  git add gold
  git commit -m "added file: gold" >/dev/null
  git branch -m master
  git push --quiet --set-upstream origin master >/dev/null

  touch unpushed_commit
  git add unpushed_commit
  git commit -m "unpushed_commit" >/dev/null

  echo $PWD && git status -s

  # /alpha/four

  cp -r $TESTDIR/alpha/three.git $TESTDIR/alpha/four.git
  cp -r $TESTDIR/alpha/three $TESTDIR/alpha/four
  cd $TESTDIR/alpha/four
  git remote set-url origin ../four.git
  git add --all
  git push --quiet >/dev/null

  echo $PWD && git status -s
} # }}}


function wrap_prep() {
  plain_div && title "TESTDIR PREP" && test_prep
}
function get_output() {
  # first argument is command to run
  if [[ "$short" == false ]]; then
    printf "${_C}------- actual output -------${_N}\n"
    $1
    printf "${_C}-----------------------------${_N}\n"
  fi
  output=()
  while IFS= read -r line; do output+=("$line"); done < <($1)
}

wrap_prep >/dev/null

# scanlist validity
function test1() {
  get_output "$ags $TESTDIR/wrong_scanlist"
  get_expect=("scanlist \"$TESTDIR/wrong_scanlist\" not found")
  check_output "ags <invalid scanlist>"
}

# ags default settings
function test2() {
  get_output "$ags $TESTDIR/scanlist"
  get_expect=(
  "${_Y}S ${_N} ~/repos/ags/test_root/alpha/one"
  "${_Y}S ${_N} ~/repos/ags/test_root/alpha/two"
  "${_Y} C${_N} ~/repos/ags/test_root/alpha/three"
  "${_G}ok${_N} ~/repos/ags/test_root/alpha/four"
  "${_R}!!${_N} ~/repos/ags/test_root/alpha/five"
  )
  check_output "ags"
}

# ags long format
function test3() {
  get_output "$ags -l $TESTDIR/scanlist"
  get_expect=(
  "${_S}~/repos/ags/test_root/alpha/one${_N}"
  "D  staged_deletion"
  "A  staged_file"
  " D untracked_deletion"
  "?? untracked_file"
  "${_S}~/repos/ags/test_root/alpha/two${_N}"
  "MD modified_file_deleted"
  "MM modified_file_modified"
  "AD new_file_deleted"
  "AM new_file_modified"
  "${_S}~/repos/ags/test_root/alpha/three${_N}"
  "skip_check" # this one has a unique commit id each time
  "${_G}ok${_S} ~/repos/ags/test_root/alpha/four${_N}"
  "${_R}!!${_N} ~/repos/ags/test_root/alpha/five ${_Y}(invalid directory)${_N}"
  )
  check_output "ags -l"
}

test1
test2
test3

if [[ $tree == true ]]; then
  plain_div
  title "TREE"
  tree $TESTDIR
fi
