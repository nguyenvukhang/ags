#!/bin/bash

# definitions/functions {{{
function div() {
  printf "${_S}= ${_Y}AGS${_S} ($1)${_N}\n"
}
function plain_div() {
  printf "${_S}========================================${_S}\n"
}
function title() {
  printf "${_S}= ${_Y}$1${_S}${_N}\n"
}
function check_output() {
  local all_ok=true
  for i in "${!res[@]}"; do
    a="${res[i]}"
    b="${exp[i]}"
    [[ $b == "skip_check" ]] && continue
    # char by char diffing
    if [[ "$a" != "$b" ]]; then
      printf "$a\n$b\n"
      diff <(printf "$a") <(printf "$b") | colordiff
      printf "${_G}CHAR BY CHAR TIME${_N}\n"
      for (( j=0; j<20; j++ )); do echo "${a:$j:1} ... ${b:$j:1}"; done
      all_ok=false
      break
    # else
    #   printf "${_G}passed line:${_N} $b\n"
    fi
  done
  if [[ $all_ok == true ]]; then
    printf "${_G}passed:${_N} $1\n"
  else
    printf "${_R}failed:${_N} $1\n"
  fi
}
_N='\033[0m'    # Normal
_R='\033[0;31m' # Red
_G='\033[0;32m' # Green
_Y='\033[0;33m' # Yellow
_B='\033[0;34m' # Blue
_P='\033[0;35m' # Purple
_C='\033[0;36m' # Cyan
_S='\033[1;37m' # Gray (Soft)
# }}}
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SCRIPT_FILENAME="${0##*/}"
TEST_DIR="test_root"
TEST=$SCRIPT_DIR/$TEST_DIR
ags=$SCRIPT_DIR/ags
tree=false
# execute this when script stops suddenly
trap "rm -rf $SCRIPT_DIR/$TEST_DIR" EXIT

function create_scanlist() {
touch $TEST/scanlist
cat <<EOF > $TEST/scanlist
$TEST/alpha/one
$TEST/alpha/two
$TEST/alpha/three
$TEST/alpha/four
EOF
}
function test_prep() { # {{{
  # create test git repositories
  mkdir -p $TEST/alpha/bravo/charlie/delta/echo/foxtrot

  create_scanlist

  mkdir $TEST/alpha/one
  cd $TEST/alpha/one && git init >/dev/null

  touch untracked_file

  touch untracked_deletion
  git add untracked_deletion
  git commit -m "added file: untracked_deletion" >/dev/null
  rm untracked_deletion

  echo "staged_deletion" >staged_deletion
  git add staged_deletion
  git commit -m "added file: staged_deletion" >/dev/null
  rm staged_deletion
  git add staged_deletion

  touch staged_file
  git add staged_file

  echo $PWD && git status -s

  mkdir $TEST/alpha/two
  cd $TEST/alpha/two && git init >/dev/null

  touch modified_file_modified
  echo "modified_file_deleted">modified_file_deleted
  git add modified_file_deleted
  git add modified_file_modified
  git commit -m "added file: modified_file_modified" >/dev/null
  echo "I love pizza">>modified_file_modified
  git add modified_file_modified
  echo "I love bubble tea">>modified_file_modified

  echo "hello world">new_file_modified
  git add new_file_modified
  echo "what's up">>new_file_modified

  echo "new_file_deleted">new_file_deleted
  git add new_file_deleted
  rm new_file_deleted

  echo "modified_file_deleted" >>modified_file_deleted
  git add modified_file_deleted
  rm modified_file_deleted

  echo $PWD && git status -s

  mkdir $TEST/alpha/three.git
  cd $TEST/alpha/three.git && git init --bare >/dev/null

  mkdir $TEST/alpha/three
  cd $TEST/alpha/three && git init >/dev/null

  git remote add origin ../three.git
  touch gold
  git add gold
  git commit -m "added file: gold" >/dev/null
  git branch -m master
  git push --quiet --set-upstream origin master >/dev/null

  touch unpushed_commit
  git add unpushed_commit
  git commit -m "unpushed_commit" >/dev/null

  echo $PWD && git status -s

  cp -r $TEST/alpha/three.git $TEST/alpha/four.git
  cp -r $TEST/alpha/three $TEST/alpha/four
  cd $TEST/alpha/four
  git remote set-url origin ../four.git
  git add --all
  git push --quiet >/dev/null

  echo $PWD && git status -s
} # }}}

plain_div && title "TEST PREP" && test_prep

plain_div

# test 1: scanlist validity
res=$($ags $TEST/wrong_scanlist)
exp=("scanlist \"$TEST/wrong_scanlist\" not found")
check_output "ags <invalid scanlist>"

# test 2: ags default settings
res=()
while IFS= read -r line; do res+=("$line"); done < <($ags $TEST/scanlist)
exp=(); exp_arr=(
"${_Y}S ${_N} ~/repos/ags/test_root/alpha/one"
"${_Y}S ${_N} ~/repos/ags/test_root/alpha/two"
"${_Y} C${_N} ~/repos/ags/test_root/alpha/three"
"${_G}ok${_N} ~/repos/ags/test_root/alpha/four"
)
while IFS= read -r line; do exp+=("$line")
done < <(for i in "${exp_arr[@]}"; do printf "$i\n"; done)
check_output "ags"

# test 3: ags long format
res=()
while IFS= read -r line; do res+=("$line"); done < <($ags -l $TEST/scanlist)
exp=(); exp_arr=(
"${_S}~/repos/ags/test_root/alpha/one${_N}"
"D  staged_deletion"
"A  staged_file"
" D untracked_deletion"
"?? untracked_file"
"${_S}~/repos/ags/test_root/alpha/two${_N}"
"MD modified_file_deleted"
"MM modified_file_modified"
"AD new_file_deleted"
"AM new_file_modified"
"${_S}~/repos/ags/test_root/alpha/three${_N}"
"skip_check" # this one has a unique commit id each time
"${_G}ok${_S} ~/repos/ags/test_root/alpha/four${_N}"
)
while IFS= read -r line; do exp+=("$line")
done < <(for i in "${exp_arr[@]}"; do printf "$i\n"; done)
check_output "ags -l"

if [[ $tree == true ]]; then
  plain_div
  title "TREE"
  tree $TEST
fi

plain_div
